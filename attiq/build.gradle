buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://github.com/uPhyca/stetho-realm/raw/master/maven-repo' }
    maven { url "https://jitpack.io" }
    maven { url "http://amateras.sourceforge.jp/mvn" }
    mavenCentral()
  }

  dependencies {
    classpath 'io.fabric.tools:gradle:1.+'
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.4.1'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.getkeepsafe.dexcount'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

def VERSION_CODE = 10001
def VERSION_NAME = "1.0.1"

android {
  signingConfigs {
    release {
      keyAlias prodKeyAlias
      keyPassword prodKeyPassword
      storeFile file(prodStoreFile)
      storePassword prodStorePassword
    }

    debug {
      keyAlias "debug"
      keyPassword "android"
      storeFile file("debug.jks")
      storePassword "android"
    }
  }

  compileSdkVersion 25
  buildToolsVersion '25.0.1'
  publishNonDefault true
  defaultConfig {
    vectorDrawables.useSupportLibrary = true
    applicationId "im.ene.lab.attiq"
    minSdkVersion 21
    targetSdkVersion 25
    versionCode VERSION_CODE
    versionName VERSION_NAME
    manifestPlaceholders = [fabric_api_key: "${attiq_fabric_api_key}"]
    multiDexEnabled false
    // resValue "string", "attiq_gcm_sender_id", "${attiq_gcm_sender_id}"
  }

  packagingOptions {
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }
  buildTypes {

    release {
      signingConfig signingConfigs.release
      debuggable false
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'),
          'proguard-rules-release.pro'

      resValue "string", "app__name", "Attiq"
    }

    prerelease {
      applicationIdSuffix ".debug"
      signingConfig signingConfigs.debug
      debuggable true
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      resValue "string", "app__name", "Attiq Debug"
    }

    debug {
      applicationIdSuffix ".debug"
      signingConfig signingConfigs.debug
      debuggable true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      resValue "string", "app__name", "Attiq Debug"
    }
  }
  productFlavors {
    prod {
      applicationId "im.ene.lab.attiq"
      minSdkVersion 21
      targetSdkVersion 25
    }
  }
  lintOptions {
    abortOnError false
    disable 'InvalidPackage'
    disable 'PrivateResource'
    disable 'MissingTranslation' // prevent build-lint check, should un-comment later to improve App
  }

  applicationVariants.all { variant ->
    if (variant.buildType.name.equals("release")) {
      variant.outputs.each { output ->
        if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
          // Rename APK
          def applicationId = defaultConfig.applicationId
          def versionCode = defaultConfig.versionCode
          def versionName = defaultConfig.versionName
          def date = new java.text.SimpleDateFormat("yyyyMMdd_HHmm").format(new Date())
          def newName = "${applicationId}_r${versionCode}_v${versionName}_${date}.apk"

          def publish = project.tasks.create("publishAll")

          // Move and Rename APK
          def task = project.tasks.create("publish${variant.name.capitalize()}Apk", Copy)
          task.from(output.outputFile)
          task.rename(output.outputFile.name, newName)
          task.into(file("${attiq_apk_output_path}/${variant.name}/apk").getAbsolutePath())

          task.dependsOn variant.assemble
          publish.dependsOn task

          // Move ProGuard
          if (variant.buildType.minifyEnabled) {
            def copyTask = project.tasks.create("copy${variant.name.capitalize()}MappingText", Copy)
            def buildTypeName = variant.buildType.name
            copyTask.from(file("build/outputs/mapping/${buildTypeName}").path)
            copyTask.into(file("${variant.name}/mapping").getAbsolutePath())

            copyTask.dependsOn variant.assemble
            task.dependsOn copyTask
          }
        }
      }
    }
  }
}

ext {
  support_libraries_version = '25.0.1'
  okhttp3_version = "3.4.2"
  retrofit2_version = "2.1.0"
  service_version = "9.0.0"
}

dependencies {
  compile fileTree(include: ['*.jar'], dir: 'libs')
  testCompile 'junit:junit:4.12'

  // compile "com.google.android.gms:play-services-gcm:${service_version}"
  compile "com.google.android.gms:play-services-analytics:${service_version}"
  // compile "com.google.android.gms:play-services-ads:${service_version}"
  compile "com.google.android.gms:play-services-appindexing:${service_version}"

  compile "com.android.support:support-v4:${support_libraries_version}"
  compile "com.android.support:appcompat-v7:${support_libraries_version}"
  compile "com.android.support:design:${support_libraries_version}"
  // compile "com.android.support:palette-v7:${support_libraries_version}"
  compile "com.android.support:recyclerview-v7:${support_libraries_version}"
  // compile "com.android.support:customtabs:${support_libraries_version}"

  compile "com.squareup.retrofit2:retrofit:${retrofit2_version}"
  compile "com.squareup.okhttp3:okhttp:${okhttp3_version}"
  compile "com.squareup.retrofit2:converter-gson:${retrofit2_version}"
  compile "com.jakewharton:butterknife:7.0.1"

  compile 'com.squareup.picasso:picasso:2.6.0-SNAPSHOT'
  // compile 'com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0'

  compile('com.github.ozodrukh:CircularReveal:2.0.1@aar') {
    transitive = true;
  }

  compile 'com.sothree.slidinguppanel:library:3.3.1'
  compile 'com.wefika:flowlayout:0.4.1'
  compile 'com.google.code.gson:gson:2.8.0'
  compile 'org.jsoup:jsoup:1.10.1'

  compile 'io.github.gitbucket:markedj:1.0.9'
  compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
  compile "de.greenrobot:eventbus:2.4.0"
  compile 'com.jakewharton.threetenabp:threetenabp:1.0.4'

  compile "io.realm:realm-android:0.87.4"

  // compile 'com.facebook.stetho:stetho-okhttp3:1.3.0'
  // compile 'com.facebook.stetho:stetho-js-rhino:1.3.0'

  compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
    transitive = true;
  }

  compile('com.crashlytics.sdk.android:crashlytics-ndk:1.1.5') {
    transitive = true;
  }
}

apply plugin: 'com.google.gms.google-services'

crashlytics {
  enableNdk true
  androidNdkOut 'src/main/obj'
  androidNdkLibsOut 'src/main/libs'
}